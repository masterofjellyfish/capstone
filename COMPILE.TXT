How To Compile & Run Capstone for Linux, Mac OSX, *nix and Windows
                        *-*-*-*-*-*

<<<<<<< HEAD:COMPILE
=======
Capstone requires no prerequisite packages, so it is easy to compile & install.



(0) Tailor Capstone to your need.

  Out of 5 archtitectures supported by Capstone (Arm, Arm64, Mips, PPC & X86),
  if you just need several selected archs, you can choose which ones you want
  to compile in by modifying config.mk before going to next steps.

  By default, all 5 architectures are compiled.


>>>>>>> upstream/master:COMPILE.TXT

Capstone requires no prerequisite packages, so it is easy to compile & install.

<<<<<<< HEAD:COMPILE

(1) On *nix (such as MacOSX, Linux & FreeBSD):

- To compile for current platform, run either:
		$ ./compile.sh
	or:
		$ make

	For FreeBSD/OpenBSD, use 'gmake' instread of 'make':

		$ gmake

	Then run "./tests/test*" to see the tests disassembling sample code.
=======
  On *nix (such as MacOSX, Linux, *BSD, Solaris):

  - To compile for current platform, run:

		$ ./make.sh
>>>>>>> upstream/master:COMPILE.TXT

- On 64-bit OS, run command below to cross-compile Capstone for 32-bit binary:

	$ ./make.sh nix32



(2) To install Capstone, run:

	$ sudo ./make.sh install
	
	For FreeBSD/OpenBSD, where sudo is unavailable, run:

	$ su; ./make.sh install

Users are then required to enter root password to copy Capstone into machine
system directories.

<<<<<<< HEAD:COMPILE
NOTE: The core framework that will be installed by "make install" consist of
only following files:
=======
  Afterwards, run "./tests/test*" to see the tests disassembling sample code.


  NOTE: The core framework installed by "./make.sh install" consist of
  following files:
>>>>>>> upstream/master:COMPILE.TXT

	/usr/include/capstone/capstone.h
	/usr/include/capstone/x86.h
	/usr/include/capstone/arm.h
	/usr/include/capstone/arm64.h
	/usr/include/capstone/mips.h
	/usr/include/capstone/ppc.h
	/usr/lib/libcapstone.so (for Linux/*nix), or /usr/lib/libcapstone.dylib (OSX)
	/usr/lib/libcapstone.a



(3) To cross-compile for Windows, Linux & gcc-mingw-w64-i686 (and also gcc-mingw-w64-x86-64
for 64-bit binaries) are required.

	- To cross-compile Windows 32-bit binary, simply run:
		$ ./make.sh cross-win32

	- To cross-compile Windows 64-bit binary, run:
		$ ./make.sh cross-win64

Resulted files "capstone.dll" and "tests/test*.exe" can then be used on Windows machine.



(4) To compile under Cygwin gcc-mingw-w64-i686 or x86_64-w64-mingw32 run:

        - To compile Windows 32-bit binary under Cygwin, simply run
                $ ./make.sh cygwin-mingw32

        - To compile Windows 64-bit binary under Cygwin, run
                $ ./make.sh cygwin-mingw64



(5) By default, "cc" (default C compiler on the system) is used as compiler.

<<<<<<< HEAD:COMPILE
(5) By default, gcc is used as compiler. To use "clang" compiler instead, run command below:
=======
	- To use "clang" compiler instead, run command below:

		$ ./make.sh clang

	- To use "gcc" compiler instead, run:
>>>>>>> upstream/master:COMPILE.TXT

		$ ./make.sh gcc


(6) So far, Python, Ruby, Ocaml, Java, C# and Go are supported by bindings. Look for
the bindings under directory bindings/, and refer to README file of corresponding languages.

