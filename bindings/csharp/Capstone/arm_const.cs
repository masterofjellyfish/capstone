// Capstone C# bindings
// By Matt Graeber <@mattifestation>, 2013>

using System;

namespace Capstone.Arm
{
    public enum SFT
    {
        INVALID = 0,
        ASR,	// shift with immediate const
        LSL,	// shift with immediate const
        LSR,	// shift with immediate const
        ROR,	// shift with immediate const
        RRX,	// shift with immediate const
        ASR_REG,	// shift with register
        LSL_REG,	// shift with register
        LSR_REG,	// shift with register
        ROR_REG,	// shift with register
        RRX_REG	// shift with register
    }

    public enum CC
    {
        INVALID = 0,
        EQ,            // Equal                      Equal
        NE,            // Not equal                  Not equal, or unordered
        HS,            // Carry set                  >, ==, or unordered
        LO,            // Carry clear                Less than
        MI,            // Minus, negative            Less than
        PL,            // Plus, positive or zero     >, ==, or unordered
        VS,            // Overflow                   Unordered
        VC,            // No overflow                Not unordered
        HI,            // Unsigned higher            Greater than, or unordered
        LS,            // Unsigned lower or same     Less than or equal
        GE,            // Greater than or equal      Greater than or equal
        LT,            // Less than                  Less than, or unordered
        GT,            // Greater than               Greater than
        LE,            // Less than or equal         <, ==, or unordered
        AL             // Always (unconditional)     Always (unconditional)
    }

    public enum OP
    {
        INVALID = 0,	// Uninitialized.
        REG,	// Register operand.
        CIMM, // C-Immediate (coprocessor registers)
        PIMM, // P-Immediate (coprocessor registers)
        IMM,	// Immediate operand.
        FP,	// Floating-Point immediate operand.
        MEM	// Memory operand
    }

    public enum REG
    {
        INVALID = 0,
        APSR,
        APSR_NZCV,
        CPSR,
        FPEXC,
        FPINST,
        FPSCR,
        FPSCR_NZCV,
        FPSID,
        ITSTATE,
        LR,
        PC,
        SP,
        SPSR,
        D0,
        D1,
        D2,
        D3,
        D4,
        D5,
        D6,
        D7,
        D8,
        D9,
        D10,
        D11,
        D12,
        D13,
        D14,
        D15,
        D16,
        D17,
        D18,
        D19,
        D20,
        D21,
        D22,
        D23,
        D24,
        D25,
        D26,
        D27,
        D28,
        D29,
        D30,
        D31,
        FPINST2,
        MVFR0,
        MVFR1,
        MVFR2,
        Q0,
        Q1,
        Q2,
        Q3,
        Q4,
        Q5,
        Q6,
        Q7,
        Q8,
        Q9,
        Q10,
        Q11,
        Q12,
        Q13,
        Q14,
        Q15,
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        S0,
        S1,
        S2,
        S3,
        S4,
        S5,
        S6,
        S7,
        S8,
        S9,
        S10,
        S11,
        S12,
        S13,
        S14,
        S15,
        S16,
        S17,
        S18,
        S19,
        S20,
        S21,
        S22,
        S23,
        S24,
        S25,
        S26,
        S27,
        S28,
        S29,
        S30,
        S31,

        MAX,		// <-- mark the end of the list or registers

        // alias registers
        //R13 = SP,
        //R14 = LR,
        //R15 = PC
    }

    public enum INSN
    {
        INVALID = 0,
        ADC,
        ADD,
        ADR,
        AESD,
        AESE,
        AESIMC,
        AESMC,
        AND,
        BFC,
        BFI,
        BIC,
        BKPT,
        BL,
        BLX,
        BX,
        BXJ,
        B,
        CDP,
        CDP2,
        CLREX,
        CLZ,
        CMN,
        CMP,
        CPS,
        CRC32B,
        CRC32CB,
        CRC32CH,
        CRC32CW,
        CRC32H,
        CRC32W,
        DBG,
        DMB,
        DSB,
        EOR,
        VMOV,
        FLDMDBX,
        FLDMIAX,
        VMRS,
        FSTMDBX,
        FSTMIAX,
        HINT,
        HLT,
        ISB,
        LDA,
        LDAB,
        LDAEX,
        LDAEXB,
        LDAEXD,
        LDAEXH,
        LDAH,
        LDC2L,
        LDC2,
        LDCL,
        LDC,
        LDMDA,
        LDMDB,
        LDM,
        LDMIB,
        LDRBT,
        LDRB,
        LDRD,
        LDREX,
        LDREXB,
        LDREXD,
        LDREXH,
        LDRH,
        LDRHT,
        LDRSB,
        LDRSBT,
        LDRSH,
        LDRSHT,
        LDRT,
        LDR,
        MCR,
        MCR2,
        MCRR,
        MCRR2,
        MLA,
        MLS,
        MOV,
        MOVT,
        MOVW,
        MRC,
        MRC2,
        MRRC,
        MRRC2,
        MRS,
        MSR,
        MUL,
        MVN,
        ORR,
        PKHBT,
        PKHTB,
        PLDW,
        PLD,
        PLI,
        QADD,
        QADD16,
        QADD8,
        QASX,
        QDADD,
        QDSUB,
        QSAX,
        QSUB,
        QSUB16,
        QSUB8,
        RBIT,
        REV,
        REV16,
        REVSH,
        RFEDA,
        RFEDB,
        RFEIA,
        RFEIB,
        RSB,
        RSC,
        SADD16,
        SADD8,
        SASX,
        SBC,
        SBFX,
        SDIV,
        SEL,
        SETEND,
        SHA1C,
        SHA1H,
        SHA1M,
        SHA1P,
        SHA1SU0,
        SHA1SU1,
        SHA256H,
        SHA256H2,
        SHA256SU0,
        SHA256SU1,
        SHADD16,
        SHADD8,
        SHASX,
        SHSAX,
        SHSUB16,
        SHSUB8,
        SMC,
        SMLABB,
        SMLABT,
        SMLAD,
        SMLADX,
        SMLAL,
        SMLALBB,
        SMLALBT,
        SMLALD,
        SMLALDX,
        SMLALTB,
        SMLALTT,
        SMLATB,
        SMLATT,
        SMLAWB,
        SMLAWT,
        SMLSD,
        SMLSDX,
        SMLSLD,
        SMLSLDX,
        SMMLA,
        SMMLAR,
        SMMLS,
        SMMLSR,
        SMMUL,
        SMMULR,
        SMUAD,
        SMUADX,
        SMULBB,
        SMULBT,
        SMULL,
        SMULTB,
        SMULTT,
        SMULWB,
        SMULWT,
        SMUSD,
        SMUSDX,
        SRSDA,
        SRSDB,
        SRSIA,
        SRSIB,
        SSAT,
        SSAT16,
        SSAX,
        SSUB16,
        SSUB8,
        STC2L,
        STC2,
        STCL,
        STC,
        STL,
        STLB,
        STLEX,
        STLEXB,
        STLEXD,
        STLEXH,
        STLH,
        STMDA,
        STMDB,
        STM,
        STMIB,
        STRBT,
        STRB,
        STRD,
        STREX,
        STREXB,
        STREXD,
        STREXH,
        STRH,
        STRHT,
        STRT,
        STR,
        SUB,
        SVC,
        SWP,
        SWPB,
        SXTAB,
        SXTAB16,
        SXTAH,
        SXTB,
        SXTB16,
        SXTH,
        TEQ,
        TRAP,
        TST,
        UADD16,
        UADD8,
        UASX,
        UBFX,
        UDIV,
        UHADD16,
        UHADD8,
        UHASX,
        UHSAX,
        UHSUB16,
        UHSUB8,
        UMAAL,
        UMLAL,
        UMULL,
        UQADD16,
        UQADD8,
        UQASX,
        UQSAX,
        UQSUB16,
        UQSUB8,
        USAD8,
        USADA8,
        USAT,
        USAT16,
        USAX,
        USUB16,
        USUB8,
        UXTAB,
        UXTAB16,
        UXTAH,
        UXTB,
        UXTB16,
        UXTH,
        VABAL,
        VABA,
        VABDL,
        VABD,
        VABS,
        VACGE,
        VACGT,
        VADD,
        VADDHN,
        VADDL,
        VADDW,
        VAND,
        VBIC,
        VBIF,
        VBIT,
        VBSL,
        VCEQ,
        VCGE,
        VCGT,
        VCLS,
        VCLZ,
        VCMP,
        VCMPE,
        VCNT,
        VCVTA,
        VCVTB,
        VCVT,
        VCVTM,
        VCVTN,
        VCVTP,
        VCVTT,
        VDIV,
        VDUP,
        VEOR,
        VEXT,
        VFMA,
        VFMS,
        VFNMA,
        VFNMS,
        VHADD,
        VHSUB,
        VLD1,
        VLD2,
        VLD3,
        VLD4,
        VLDMDB,
        VLDMIA,
        VLDR,
        VMAXNM,
        VMAX,
        VMINNM,
        VMIN,
        VMLA,
        VMLAL,
        VMLS,
        VMLSL,
        VMOVL,
        VMOVN,
        VMSR,
        VMUL,
        VMULL,
        VMVN,
        VNEG,
        VNMLA,
        VNMLS,
        VNMUL,
        VORN,
        VORR,
        VPADAL,
        VPADDL,
        VPADD,
        VPMAX,
        VPMIN,
        VQABS,
        VQADD,
        VQDMLAL,
        VQDMLSL,
        VQDMULH,
        VQDMULL,
        VQMOVUN,
        VQMOVN,
        VQNEG,
        VQRDMULH,
        VQRSHL,
        VQRSHRN,
        VQRSHRUN,
        VQSHL,
        VQSHLU,
        VQSHRN,
        VQSHRUN,
        VQSUB,
        VRADDHN,
        VRECPE,
        VRECPS,
        VREV16,
        VREV32,
        VREV64,
        VRHADD,
        VRINTA,
        VRINTM,
        VRINTN,
        VRINTP,
        VRINTR,
        VRINTX,
        VRINTZ,
        VRSHL,
        VRSHRN,
        VRSHR,
        VRSQRTE,
        VRSQRTS,
        VRSRA,
        VRSUBHN,
        VSELEQ,
        VSELGE,
        VSELGT,
        VSELVS,
        VSHLL,
        VSHL,
        VSHRN,
        VSHR,
        VSLI,
        VSQRT,
        VSRA,
        VSRI,
        VST1,
        VST2,
        VST3,
        VST4,
        VSTMDB,
        VSTMIA,
        VSTR,
        VSUB,
        VSUBHN,
        VSUBL,
        VSUBW,
        VSWP,
        VTBL,
        VTBX,
        VCVTR,
        VTRN,
        VTST,
        VUZP,
        VZIP,
        ADDW,
        ASR,
        DCPS1,
        DCPS2,
        DCPS3,
        IT,
        LSL,
        LSR,
        ORN,
        ROR,
        RRX,
        SUBS,
        SUBW,
        TBB,
        TBH,
        CBNZ,
        CBZ,
        MOVS,
        POP,
        PUSH,
        MAX
    }

    public enum GRP
    {
        INVALID = 0,
        CRYPTO,
        DATABARRIER,
        DIVIDE,
        FPARMV8,
        MULTPRO,
        NEON,
        T2EXTRACTPACK,
        THUMB2DSP,
        TRUSTZONE,
        V4T,
        V5T,
        V5TE,
        V6,
        V6T2,
        V7,
        V8,
        VFP2,
        VFP3,
        VFP4,
        ARM,
        MCLASS,
        NOTMCLASS,
        THUMB,
        THUMB1ONLY,
        THUMB2,
        PREV8,
        FPVMLX,
        MULOPS,
        CRC,
        DPVFP,
        V6M,

        JUMP,	// all jump instructions (conditional+direct+indirect jumps)

        MAX
    }
}
